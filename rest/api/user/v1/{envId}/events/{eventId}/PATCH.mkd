# `PATCH /api/user/v1/{envId}/events/{eventId}/` #

Change Event attributes.

## Request Parameters #

### Path Parameters ###

Path parameters are included in the URL.

#### `envId` ####

The ID of the Environment scoping this request

Parameter of type: `integer`.


#### `eventId` ####

The ID of a Event object.

Parameter of type: `string`.







### Request Body ###

The request body parameter is passed as the body of the request.

#### `eventObject` ####

The JSON representation of a Event object.


An object of type: [`Event`](./../../../../../../../definitions/Event.mkd).





## Responses ##


### 200 ###

The JSON representation of a Event object.

Response body: [`EventDetailEnvelope`](./../../../../../../../definitions/EventDetailEnvelope.mkd).


### 400 ###

A client-side error was made

Response body: [`ApiErrorEnvelope`](./../../../../../../../definitions/ApiErrorEnvelope.mkd).


### 403 ###

Insufficient permissions

Response body: [`ApiErrorEnvelope`](./../../../../../../../definitions/ApiErrorEnvelope.mkd).


### 500 ###

A server-side error occured

Response body: [`ApiErrorEnvelope`](./../../../../../../../definitions/ApiErrorEnvelope.mkd).


### 401 ###

Request was not authenticated

Response body: [`ApiErrorEnvelope`](./../../../../../../../definitions/ApiErrorEnvelope.mkd).




## Swagger Definition ##

    {
      "delete": {
        "description": "Delete this Event from this Environment.", 
        "responses": {
          "200": {
            "description": "Event deleted"
          }, 
          "400": {
            "description": "A client-side error was made", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "403": {
            "description": "Insufficient permissions", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "500": {
            "description": "A server-side error occured", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "401": {
            "description": "Request was not authenticated", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }
        }
      }, 
      "get": {
        "description": "Retrieve an Event.", 
        "responses": {
          "200": {
            "description": "The JSON representation of a Event object.", 
            "schema": {
              "$ref": "#/definitions/EventDetailEnvelope"
            }
          }, 
          "400": {
            "description": "A client-side error was made", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "403": {
            "description": "Insufficient permissions", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "500": {
            "description": "A server-side error occured", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "401": {
            "description": "Request was not authenticated", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }
        }
      }, 
      "parameters": [
        {
          "required": true, 
          "type": "integer", 
          "description": "The ID of the Environment scoping this request", 
          "in": "path", 
          "name": "envId"
        }, 
        {
          "required": true, 
          "type": "string", 
          "description": "The ID of a Event object.", 
          "in": "path", 
          "name": "eventId"
        }
      ], 
      "patch": {
        "description": "Change Event attributes.", 
        "parameters": [
          {
            "required": true, 
            "in": "body", 
            "description": "The JSON representation of a Event object.", 
            "name": "eventObject", 
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "The JSON representation of a Event object.", 
            "schema": {
              "$ref": "#/definitions/EventDetailEnvelope"
            }
          }, 
          "400": {
            "description": "A client-side error was made", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "403": {
            "description": "Insufficient permissions", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "500": {
            "description": "A server-side error occured", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }, 
          "401": {
            "description": "Request was not authenticated", 
            "schema": {
              "$ref": "#/definitions/ApiErrorEnvelope"
            }
          }
        }
      }
    }